/*
 * Copyright 2017, Data61
 * Commonwealth Scientific and Industrial Research Organisation (CSIRO)
 * ABN 41 687 119 230.
 *
 * This software may be distributed and modified according to the terms of
 * the BSD 2-Clause license. Note that NO WARRANTY is provided.
 * See "LICENSE_BSD2.txt" for details.
 *
 * @TAG(DATA61_BSD)
 */

import <std_connector.camkes>;
import <global-connectors.camkes>;

import "interfaces/dataport_io.idl4";
import "interfaces/VectorCoreInterface.camkes";
import "components/OpenTitanUARTDriver/OpenTitanUARTDriver.camkes";
import "components/DebugConsole/DebugConsole.camkes";
import "components/ProcessManager/ProcessManager.camkes";
import "components/MlCoordinator/MlCoordinator.camkes";
import "components/SeL4Debug/SeL4Debug.camkes";
import "components/VectorCoreDriver/VectorCoreDriver.camkes";

component OpenTitanUART {
    hardware;
    dataport Buf mmio_region;

    emits Interrupt tx_watermark;
    emits Interrupt rx_watermark;
    emits Interrupt tx_empty;
}

component VectorCoreHw {
    hardware;
    dataport Buf csr;
}

assembly {
    composition {
        component SeL4Debug sel4debug;

        component VectorCoreHw vctop;
        component VectorCoreDriver vc_drv;

        component OpenTitanUART uart;
        component OpenTitanUARTDriver uart_driver;

        component ProcessManager process_manager;
        component MlCoordinator ml_coordinator;
        component DebugConsole debug_console;

        // OpenTitanUARTDriver
        connection seL4HardwareMMIO uart_mem(from uart_driver.mmio_region,
                                             to uart.mmio_region);
        connection seL4HardwareInterrupt uart_tx_watermark(from uart.tx_watermark,
                                                           to uart_driver.tx_watermark);
        connection seL4HardwareInterrupt uart_rx_watermark(from uart.rx_watermark,
                                                           to uart_driver.rx_watermark);
        connection seL4HardwareInterrupt uart_tx_empty(from uart.tx_empty,
                                                       to uart_driver.tx_empty);

        // VectorCoreDriver
        connection seL4HardwareMMIO vc_csr(from vc_drv.csr, to vctop.csr);
        connection seL4RPCCall VectorCoreInterface(from ml_coordinator.vctop,
                                                   to vc_drv.vctop);

        // Hookup ProcessManager to DebugConsole for shell commands.
        connection seL4RPCCall ProcessControlInterface(from debug_console.proc_ctrl,
                                                       to process_manager.proc_ctrl);
        connection seL4RPCCall PackageManagerInterface(from debug_console.pkg_mgmt,
                                                       to process_manager.pkg_mgmt);

        // Connect the DebugConsole to the OpenTitanUARTDriver.
        connection seL4SharedData tx_channel(
            from debug_console.tx_dataport, to uart_driver.tx_dataport);
        connection seL4RPCCall tx_call(
            from debug_console.uart_tx, to uart_driver.tx);
        connection seL4SharedData rx_channel(
            from debug_console.rx_dataport, to uart_driver.rx_dataport);
        connection seL4RPCCall rx_call(
            from debug_console.uart_rx, to uart_driver.rx);

        // Connect the LoggerInterface to each component that needs to log
        // to the console. Note this allocates a 4KB shared memory region to
        // each component and copies data between components.
        connection seL4RPCOverMultiSharedData LoggerInterface(
            from process_manager.logger,
            from ml_coordinator.logger,
            to debug_console.logger);

        // Connect the SeL4Debug interface of each component that needs access.
        connection seL4RPCCall SeL4DebugInterface(from debug_console.sel4debug,
                                                  from process_manager.sel4debug,
                                                  to sel4debug.sel4debug);

        connection seL4RPCCall MlCoordinatorInterface(from debug_console.mlcoord,
                                                      to ml_coordinator.mlcoord);

    }

    configuration {
        uart.mmio_region_paddr = 0x40010000;
        uart.mmio_region_size = 0x1000;
        uart.tx_watermark_irq_number = 9;
        uart.rx_watermark_irq_number = 10;
        uart.tx_empty_irq_number = 11;

        vctop.csr_paddr = 0x48000000;
        vctop.csr_size = 0x1000;

        random.ID = 1;

        uart.integrity_label = "opentitan_uart_driver";
    }
}
